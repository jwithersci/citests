# This script is for use in CI run error trapping.
#
# Using passed values from the workflow it creates a new issue if
# one doesn't exist for the PR failing CI tests.
#
# If there is already an issue against that PR will add a comment
# with new error run information.
#
# It selects issues based on a label applied to show an issue has been
# generated by CI automation. This prevents an unrelated issue that happens
# to have the PR number in the title from being used.

from github import Github
from datetime import datetime
import os

TOKEN = os.environ['TOKEN']
REPO = os.environ['REPO']
WORKFLOW = os.environ['WORKFLOW']
FLAG_LABEL = os.environ['FLAG_LABEL']
RUN_NUMBER = os.environ['RUN_NUMBER']
RUN_ID = os.environ['RUN_ID']
PR_NUMBER = os.environ['PR_NUMBER']
PR_LINK = os.environ['PR_LINK']

def get_tagged_issues(repo, flag_label, pr_number):
    issues = repo.get_issues(state='open', labels=[flag_label])
    tagged_issues = []
    trigger_string = f"PR #{pr_number}"
    for issue in issues:
        if trigger_string in issue.title:
            tagged_issues.append(issue)
    return(tagged_issues)

def create_issue(repo, flag_label, workflow, run_number, run_id, pr_number, pr_link):
    run_link = f"http://github.com/{repo}/actions/runs/{run_id}"
    body_string = f"PR {pr_number} ({pr_link}) had a CI failure: \n"
    body_string += f"{workflow} run number {run_number} failed. \n"
    body_string += "Please examine the run itself for details:\n"
    body_string += f"({run_link})\n\n"
    body_string += "This issue has been automatically generated for "
    body_string += "notification purposes."

    title_string = f"PR #{pr_number} CI Run Failed"
    new_issue = repo.create_issue(title = title_string, body = body_string, 
                                  labels=[flag_label])
    return(new_issue)


def add_comment(issue, run_number, workflow):
    dt_string = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    msg_string = "Error reoccurred: " + dt_string
    msg_string += workflow + " run number: " + run_number
    issue.create_comment(msg_string) 
    return()

if __name__ == "__main__":
    
    g = Github(TOKEN)
    repo = g.get_repo(REPO)
    tagged_issues = get_tagged_issues(repo, FLAG_LABEL, PR_NUMBER)
    if not tagged_issues:
        create_issue(repo, FLAG_LABEL, WORKFLOW, RUN_NUMBER, RUN_ID, PR_NUMBER, PR_LINK)
    else:
        for issue in tagged_issues:
            add_comment(issue, RUN_NUMBER, WORKFLOW)

    # occasionally have had api ignore the 'open' state filter on
    # the get_issues request, this helps troubleshooting.
    for issue in tagged_issues:
        print(issue.number, issue.title, issue.closed_at)
    
    